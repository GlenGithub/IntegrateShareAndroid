apply plugin: 'com.android.application'

def gradleAfter = {
    [
            gradle.gradleVersion.tokenize('.')*.toInteger(),
            it.toString().tokenize('.')*.toInteger()
    ].transpose().inject(null){ result, item ->
        result != null ?:
                (item[0] > item[1] ?: item[0] == item[1] ? null : false);
    }
}
def after1_8 = gradleAfter(1.8)

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    if (after1_8) {
        useOldManifestMerger true
        lintOptions {
            abortOnError false
            checkReleaseBuilds false
        }
    }

    defaultConfig {
        applicationId "com.comsince.secret"
        minSdkVersion 4
        targetSdkVersion 10
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile 'com.android.support:appcompat-v7:19.1.0'
    //compile 'com.android.support:support-v4:19.1.0'
}

if (gradleAfter(1.12) ) {
    tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
        def unpackageSo = 'true' == project.properties.get('unpackageSo')

        if (unpackageSo) {
            println "So files is not packaged due to project property: 'unpackageSo' is true"
            android.sourceSets.main.jniLibs.srcDirs = []
        } else {
            println "Start setting up environment for packaging so files "
            android.sourceSets.main.jniLibs.srcDirs =
                    android.sourceSets.main.jniLibs.srcDirs << ['libs']
        }
    }
} else {
    task copyNativeLibs(type: Copy) {
        from fileTree(dir: 'libs', include: '**/*.so') into 'build/libs'
    }

    //@Deprecated Compile class is deprecated in android gradle plugin 0.13.+ / gradle 2.1
    tasks.withType(Compile) { compileTask -> compileTask.dependsOn copyNativeLibs }

    clean.dependsOn 'cleanCopyNativeLibs'

    tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
        def unpackageSo = 'true' == project.properties.get('unpackageSo')

        if (gradleAfter(1.8)) {
            if (unpackageSo) {
                println "So files is not packaged due to project property: 'unpackageSo' is true"
                android.sourceSets.main.jniLibs.srcDirs = []
            } else {
                println "Start setting up environment for packaging so files "
                android.sourceSets.main.jniLibs.srcDirs =
                        android.sourceSets.main.jniLibs.srcDirs << ['libs']
            }
        } else {
            if (unpackageSo) {
                println "So files is not packaged due to project property: 'unpackageSo' is true"
                return;
            }

            println "Start setting up environment for packaging so files "
            def jni;
            if (pkgTask.metaClass.hasProperty(pkgTask, 'jniDir')) {
                jni = "jniDir"
                // pkgTask.jniDir file('build/libs')
                pkgTask."${jni}" file('build/libs')
            } else if (pkgTask.metaClass.hasProperty(pkgTask, 'jniFolders')) {
                jni = 'jniFolders'
                // pkgTask.jniFolders = new HashSet<File>()
                // pkgTask.jniFolders.add(new File(projectDir, 'native-libs'))
                pkgTask."${jni}" = new HashSet<File>()
                pkgTask."${jni}".add(new File(projectDir, 'build/libs'))
            } else {
                return
            }
        }
    }
}
